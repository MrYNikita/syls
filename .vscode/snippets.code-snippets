{
    //
    // Классы
    "class-syls": {
        "body": [
            "//#region YI",
            "",
            "import { yClassifyProp } from '@syls/y';",
            "",
            "/** @type {import('./config.mjs')['default']['value']?} */",
            "let config = null;",
            "",
            "await import('./config.mjs')",
            "",
            "    .then(c => config = c.default?.value ? c.default.value : c.default)",
            "    .catch(e => e);",
            "",
            "/** @type {import('./error.mjs')['default']?} */",
            "let error = null;",
            "",
            "await import('./error.mjs')",
            "",
            "    .then(e => error = e.default)",
            "    .catch(e => e);",
            "",
            "//#endregion",
            "//#region YT",
            "",
            "/** ### Y${1:${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/${1:/capitalize}/}}T",
            " * - Тип `T`",
            " * ",
            " * Основной параметр модуля `Y$1`.",
            " * ",
            " * @typedef {Y$1TE&Y$1TU&$2} Y$1T",
            " * ",
            "*/",
            "/** ### Y$1TE",
            " * - Тип `TE`",
            " * ",
            " * Параметр наследования `Y$1`.",
            " * ",
            " * @typedef {Omit<D$1, keyof S$1>} Y$1TE",
            " * ",
            "*/",
            "/** ### Y$1TU",
            " * - Тип `TU`",
            " * ",
            " * Уникальные параметры `Y$1`.",
            " * ",
            " * @typedef Y$1TU",
            " * @prop {any} _",
            " * ",
            "*/",
            "",
            "//#endregion",
            "",
            "class S$1 extends ${2:Y}$0 {",
            "    ",
            "    /**",
            "     * ### stock",
            "     * ",
            "     * ***",
            "     * ",
            "     * ",
            "     * ",
            "     * ***",
            "     * @type {Y$1[]}",
            "     * @field",
            "     * @static",
            "     * @public",
            "    */",
            "    static stock = [];",
            "    /**",
            "     * ### config",
            "     * ",
            "     * ",
            "     * ",
            "     * ***",
            "     * @field",
            "     * @static",
            "     * @public",
            "    */",
            "    static config = config;",
            "    ",
            "    /**",
            "     * @arg {...Y$1} args `Аргументы`",
            "     * @returns {Y$1[]}",
            "    */",
            "    static create(...args) {",
            "        ",
            "        return Object.getPrototypeOf(S$1).create.apply(this, [...args]);",
            "        ",
            "    };",
            "    ",
            "};",
            "class D$1 extends S$1 {",
            "    ",
            "    ",
            "    ",
            "};",
            "class I$1 extends D$1 {",
            "    ",
            "    ",
            "    ",
            "};",
            "class M$1 extends I$1 {",
            "    ",
            "    ",
            "    ",
            "};",
            "class F$1 extends M$1 {",
            "    ",
            "    /**",
            "     * ### Y$1.constructor",
            "     * ",
            "     * ",
            "     * ",
            "     * ***",
            "     * @arg {Y$1T} t",
            "    */",
            "    constructor(t) {",
            "        ",
            "        t = [...arguments];",
            "        ",
            "        super(Object.assign(t = F$1.#before(t), {}));",
            "        ",
            "        F$1.#deceit.apply(this, [t]);",
            "        ",
            "        return this.correlate();",
            "        ",
            "    };",
            "    ",
            "    /** @arg {any[]} t */",
            "    static #before(t) {",
            "        ",
            "        /** @type {Y$1T} */",
            "        let r = {};",
            "        ",
            "        if (t?.length === 1 && [Object, Y$1].includes(t[0]?.constructor) && !Object.getOwnPropertyNames(t[0]).includes('_ytp')) {",
            "            ",
            "            r = t[0];",
            "            ",
            "            return r;",
            "            ",
            "        } else if (!t.length) {",
            "            ",
            "            return r;",
            "            ",
            "        };",
            "        ",
            "        if (t[0]?._ytp) {",
            "        ",
            "            t = [...t[0]._ytp];",
            "        ",
            "        };",
            "        ",
            "        const arg = yClassifyProp(t);",
            "        ",
            "        ",
            "        ",
            "        if (!Object.values(r).length) {",
            "            ",
            "            r = { _ytp: t, };",
            "            ",
            "        };",
            "        ",
            "        return r;",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #deceit(t) {",
            "        ",
            "        try {",
            "            ",
            "            F$1.#verify.apply(this, [t]);",
            "            ",
            "        } catch (e) {",
            "            ",
            "            throw e;",
            "            ",
            "        } finally {",
            "            ",
            "            ",
            "            ",
            "        };",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #verify(t) {",
            "        ",
            "        const {",
            "            ",
            "            ",
            "            ",
            "        } = t;",
            "        ",
            "        F$1.#handle.apply(this, [t]);",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #handle(t) {",
            "        ",
            "        ",
            "        ",
            "        F$1.#create.apply(this, [t]);",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #create(t) {",
            "        ",
            "        const {",
            "            ",
            "            ",
            "            ",
            "        } = t;",
            "        ",
            "        this",
            "            .adopt(t)",
            "            .adoptDefault(this.constructor.config ?? config);",
            "        ",
            "    };",
            "    ",
            "};",
            "",
            "/**",
            " * ### Y$1",
            " * - Тип `SDIMFY`",
            " * - Версия `0.0.0`",
            " * - Цепочка `BDVHC`",
            " * ***",
            " * ",
            " * Класс `Y$1`.",
            " * ",
            " * ***",
            " * @class",
            " * ",
            "*/",
            "${3:export }class Y$1 extends F$1 {",
            "    ",
            "    ",
            "    ",
            "};",
        ],
        "scope": "javascript,typescript",
        "prefix": "class-syls",
        "description": "Class-syls является новейшим сниппетом новой файловой структуры модулей с использованием inner папки моудля."
    },
    "class-generic-syls": {
        "body": [
            "//#region YI",
            "",
            "import { yClassifyProp, } from \"@syls/y\";",
            "",
            "/** @type {import('./config.mjs')['default']['value']?} */",
            "let config = null;",
            "",
            "await import('./config.mjs')",
            "",
            "    .then(c => config = c.default?.value ? c.default.value : c.default)",
            "    .catch(e => e);",
            "",
            "/** @type {import('./error.mjs')['default']?} */",
            "let error = null;",
            "",
            "await import('./error.mjs')",
            "",
            "    .then(e => error = e.default)",
            "    .catch(e => e);",
            "",
            "//#endregion",
            "//#region YT",
            "",
            "/** ### Y${1:${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/${1:/capitalize}/}}T",
            " * - Тип `T`",
            " * ",
            " * Основной параметр модуля `Y$1`.",
            " * ",
            " * ***",
            " * ",
            " * @typedef {Y$1TE&Y$1TU} Y$1T",
            "*/",
            "/** ### Y$1TE",
            " * - Тип `TE`",
            " * ",
            " * Параметр наследования `Y$1`.",
            " * ",
            " * @typedef {Omit<D$1, keyof S$1>} Y$1TE",
            "*/",
            "/** ### Y$1TU",
            " * - Тип `TU`",
            " * ",
            " * Уникальные параметры `Y$1`.",
            " * ",
            " * @typedef Y$1TU",
            " * @prop {} _",
            "*/",
            "/** ### Y$1TUG",
            " * - Тип `TUP`",
            " * ",
            " * Уникальные генеративные параметры `Y$1`.",
            " * ",
            " * @typedef Y$1TUG",
            " * @prop {null} _",
            "*/",
            "",
            "//#endregion",
            "",
            "/**",
            " * @template Y1",
            "*/",
            "class S$1 extends ${2:Y}$0 {",
            "    ",
            "    /**",
            "     * ### stock",
            "     * ",
            "     * ***",
            "     * ",
            "     * ",
            "     * ",
            "     * ***",
            "     * @type {Y$1[]}",
            "     * @field",
            "     * @static",
            "     * @public",
            "    */",
            "    static stock = [];",
            "    /**",
            "     * ### config",
            "     * ",
            "     * ",
            "     * ",
            "     * ***",
            "     * @field",
            "     * @static",
            "     * @public",
            "    */",
            "    static config = config;",
            "    ",
            "    /**",
            "     * @arg {...Y$1} args `Аргументы`",
            "     * @returns {Y$1[]}",
            "    */",
            "    static create(...args) {",
            "        ",
            "        return Object.getPrototypeOf(S$1).create.apply(this, [...args]);",
            "        ",
            "    };",
            "    ",
            "};",
            "/**",
            " * @extends S$1<Y1>",
            " * @template Y1",
            "*/",
            "class D$1 extends S$1 {",
            "    ",
            "    ",
            "    ",
            "};",
            "/**",
            " * @extends D$1<Y1>",
            " * @template Y1",
            "*/",
            "class I$1 extends D$1 {",
            "    ",
            "    ",
            "    ",
            "};",
            "/**",
            " * @extends I$1<Y1>",
            " * @template Y1",
            "*/",
            "class M$1 extends I$1 {",
            "    ",
            "    ",
            "    ",
            "};",
            "/**",
            " * @extends M$1<Y1>",
            " * @template Y1",
            "*/",
            "class F$1 extends M$1 {",
            "    ",
            "    /**",
            "     * ### Y$1.constructor",
            "     * ",
            "     * ",
            "     * ",
            "     * ***",
            "     * @arg {Y$1T&G} t",
            "    */",
            "    constructor(t) {",
            "        ",
            "        t = [...arguments];",
            "        ",
            "        super(Object.assign(t = F$1.#before(t), {}));",
            "        ",
            "        F$1.#deceit.apply(this, [t]);",
            "        ",
            "    };",
            "    ",
            "    /** @arg {any[]} t */",
            "    static #before(t) {",
            "        ",
            "        /** @type {Y$1T} */",
            "        let r = {};",
            "        ",
            "        if (t?.length === 1 && [Object, Y$1].includes(t[0]?.constructor) && !Object.getOwnPropertyNames(t[0]).includes('_ytp')) {",
            "            ",
            "            r = t[0];",
            "            ",
            "            return r;",
            "            ",
            "        } else if (!t.length) {",
            "            ",
            "            return r;",
            "            ",
            "        };",
            "        ",
            "        if (t[0]?._ytp) {",
            "        ",
            "            t = [...t[0]._ytp];",
            "        ",
            "        };",
            "        ",
            "        const arg = yClassifyProp(t);",
            "        ",
            "        ",
            "        ",
            "        if (!Object.values(r).length) {",
            "            ",
            "            r = { _ytp: t, };",
            "            ",
            "        };",
            "        ",
            "        return r;",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #deceit(t) {",
            "        ",
            "        try {",
            "            ",
            "            F$1.#verify.apply(this, [t]);",
            "            ",
            "        } catch (e) {",
            "            ",
            "            throw e;",
            "            ",
            "        } finally {",
            "            ",
            "            ",
            "            ",
            "        };",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #verify(t) {",
            "        ",
            "        const {",
            "            ",
            "            ",
            "            ",
            "        } = t;",
            "        ",
            "        F$1.#handle.apply(this, [t]);",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #handle(t) {",
            "        ",
            "        ",
            "        ",
            "        F$1.#create.apply(this, [t]);",
            "        ",
            "    };",
            "    /** @arg {Y$1T} t @this {Y$1} */",
            "    static #create(t) {",
            "        ",
            "        const {",
            "            ",
            "            ",
            "            ",
            "        } = t;",
            "        ",
            "        this",
            "            .adopt(t)",
            "            .adoptDefault(this.constructor.config ?? config);",
            "        ",
            "    };",
            "    ",
            "};",
            "",
            "/**",
            " * ### Y$1",
            " * - Тип `SDIMFY`",
            " * - Версия `0.0.0`",
            " * - Цепочка `BDVHC`",
            " * ***",
            " * ",
            " * Класс `Y$1`.",
            " * ",
            " * ***",
            " * @class",
            " * @template Y1",
            " * @extends F$1<Y$1TUG&Y1>",
            " * ",
            "*/",
            "export class Y$1 extends F$1 {",
            "    ",
            "    /** @arg {Y1} t */",
            "    constructor(t) { super(t); };",
            "    ",
            "};",
        ],
        "scope": "javascript,typescript",
        "prefix": "class-generic-syls",
        "description": "Class-generic-syls - это класс соотвествующий актуальным стандартам syls с дженерик-параметром.",
    },
    //
    // Поля
    "field-syls": {
        "body": [
            "/**",
            " * ### $1",
            " * ",
            " * $5",
            " * ",
            " * *** ",
            " * @type {${3|any,number,string,boolean,void|}}",
            " * @field",
            " * @${4|public,protected,private|}",
            "*/",
            "$1 = $2;",
        ],
        "scope": "javascript,typescript",
        "prefix": "field-syls",
        "description": "Поле класса syls.",
    },
    "field-static-syls": {
        "body": [
            "/**",
            " * ### $1",
            " * ",
            " * ***",
            " * ",
            " * $5",
            " * ",
            " * *** ",
            " * @type {${3|any,number,string,boolean,void|}}",
            " * @field",
            " * @static",
            " * @${4|public,protected,private|}",
            "*/",
            "static $1 = $2;",
        ],
        "scope": "javascript,typescript",
        "prefix": "field-static-syls",
        "description": "Статическое поле класса syls.",
    },
    //
    // Свойства
    "property-syls": {
        "body": [
            "/**",
            " * ### $1",
            " * ",
            " * ***",
            " * ",
            " * $5",
            " * ",
            " * *** ",
            " * @type {${3|any,number,string,boolean,void|}}",
            " * @${4|public,protected,private|}",
            " * @property",
            "*/",
            "$1: $2,",
        ],
        "scope": "javascript,typescript",
        "prefix": "property-syls",
        "description": "Свойство объекта syls.",
    },
    //
    // Методы
    "method-syls": {
        "body": [
            "/**",
            " * ### $1",
            " * ",
            " * ***",
            " * ",
            " * $4",
            " * ",
            " * ***",
            " * $2",
            " * @method",
            " * @${3|public,protected,private|}",
            "*/",
            "$1() {",
            "    ",
            "    $0",
            "    ",
            "};",
        ],
        "scope": "javascript,typescript",
        "prefix": "method-syls",
        "description": "Method-syls - обычный syls."
    },
    "method-async-syls": {
        "body": [
            "/**",
            " * ### $1",
            " * ",
            " * ***",
            " * ",
            " * $4",
            " * ",
            " * ***",
            " * $2",
            " * @async",
            " * @method",
            " * @${3|public,protected,private|}",
            "*/",
            "async $1() {",
            "    ",
            "    $0",
            "    ",
            "};",
        ],
        "scope": "javascript,typescript",
        "prefix": "method-async-syls",
        "description": "Method-async-syls - асинхронный метод syls."
    },
    "method-static-syls": {
        "body": [
            "/**",
            " * ### $1",
            " * ",
            " * ***",
            " * ",
            " * $4",
            " * ",
            " * ***",
            " * $2",
            " * @static",
            " * @method",
            " * @${3|public,protected,private|}",
            "*/",
            "static $1() {",
            "    ",
            "    $0",
            "    ",
            "};",
        ],
        "scope": "javascript,typescript",
        "prefix": "method-static-syls",
        "description": "Method-static-syls - статический метод syls."
    },
    "method-async-static-syls": {
        "body": [
            "/**",
            " * ### $1",
            " * ",
            " * ***",
            " * ",
            " * $4",
            " * ",
            " * ***",
            " * $2",
            " * @async",
            " * @method",
            " * @static",
            " * @${3|public,protected,private|}",
            "*/",
            "async static $1() {",
            "    ",
            "    $0",
            "    ",
            "};",
        ],
        "scope": "javascript,typescript",
        "prefix": "method-async-static-syls",
        "description": "Method-static-syls - асинхронный статический метод syls."
    },
    //
    // Файлы
    "file-error-syls": {
        "body": [
            "//#region YI",
            "",
            "import { } from \"@syls/y\";",
            "",
            "//#endregion",
            "//#region YT",
            "",
            "/** ### ${1:${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}}TError",
            " * - Тип `TT`",
            " * - Версия `0.0.0`",
            " * ",
            " * Ошибка модуля `$1`.",
            " * ",
            " * @typedef {YError<import('./class.mjs').Y${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/${1:/capitalize}/}>} $1TError",
            " * ",
            "*/",
            "",
            "//#endregion",
            "//#region YV",
            "",
            "",
            "",
            "//#endregion",
            "",
            "",
            "",
            "$0",
        ],
        "scope": "javascript,typescript",
        "prefix": "file-error-syls",
        "description": "File-error-syls - это шаблон файла ошибок (error) syls.",
        "isFileTemplate": true,
    },
    "file-config-syls": {
        "body": [
            "import { YConfig } from \"@syls/y/config\";",
            "",
            "/** @type {$2} */",
            "const config = {",
            "    ",
            "    ",
            "    ",
            "};",
            "",
            "/** ### ${1:config${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/${1:/capitalize}/}}",
            " * ",
            " * Конфигуратор модуля `${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}`.",
            " * ",
            " * ***",
            " * @public",
            "*/",
            "export const $1 = new YConfig(Object.assign(config, {",
            "    ",
            "    ",
            "    ",
            "}), $2);",
            "",
            "export default $1;",
            "",
            "file-metadata-syls$0",
        ],
        "scope": "javascript,typescript",
        "prefix": "file-config-syls",
        "description": "File-config-syls - это шаблон файла конфигуратора (config) syls.",
        "isFileTemplate": true,
    },
    "file-module-syls": {
        "body": [
            "//#region YI",
            "",
            "/** @type {import('./config.mjs')['default']['value']?} */",
            "let config = null;",
            "",
            "await import('./config.mjs')",
            "",
            "    .then(c => config = c.default?.value ? c.default.value : c.default)",
            "    .catch(e => e);",
            "",
            "/** @type {import('./error.mjs')['default']?} */",
            "let error = null;",
            "",
            "await import('./error.mjs')",
            "",
            "    .then(e => error = e.default)",
            "    .catch(e => e);",
            "",
            "//#endregion",
            "//#region YT",
            "",
            "/** ### ${1:${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}}T",
            " * - Тип `T`",
            " * - Версия `0.0.0`",
            " * ",
            " * Основной параметр модуля `$1`.",
            " * ",
            " * @typedef $1T",
            " * @prop {any} _",
            " * ",
            "*/",
            "",
            "//#endregion",
            "//#region YV",
            "",
            "",
            "",
            "//#endregion",
            "",
            "file-metadata-syls$0",
        ],
        "scope": "javascript,typescript",
        "prefix": "file-module-syls",
        "description": "File-module-syls - это шаблон файла модуля (module) syls.",
        "isFileTemplate": true
    },
    "file-export-syls": {
        "body": [
            "export * from \"./class.mjs\";",
            "export * from \"./config.mjs\";",
            "export * from \"./module.mjs\";",
            "",
            "$0",
        ],
        "scope": "javascript,typescript",
        "prefix": "file-export-syls",
        "description": "File-export-syls - это шаблон файла экспорта (export) syls.",
        "isFileTemplate": true,
    },
    "file-package-syls": {
        "body": [
            "{",
            "    \"name\": \"@syls/${TM_DIRECTORY/(.*?[\\\\])+(.*)/${2}/}\",",
            "    \"type\": \"${1|module,commonjs|}\",",
            "    \"files\": [",
            "        \"./-module\",",
            "        \"./-submodule\",",
            "        \"./package.json\"",
            "    ],",
            "    \"author\": {",
            "        \"name\": \"Yakhin Nikita Artemovich\",",
            "        \"email\": \"mr.y.nikita@gmail.com\"",
            "    },",
            "    \"version\": \"0.0.0\",",
            "    \"license\": \"Apache-2.0\",",
            "    \"funding\": {",
            "        \"url\": \"https://boosty.to/mr.y.nikita\",",
            "        \"type\": \"boosty\"",
            "    },",
            "    \"exports\": {",
            "        \".\": {",
            "            \"types\": \"./-module/type.d.ts\",",
            "            \"import\": \"./-module/export.mjs\"",
            "        }",
            "    },",
            "    \"scripts\": {",
            "        \"test\": \"node ./-module/module.test.js\"",
            "    },",
            "    \"engines\": {",
            "        \"node\": \">=18.0.0\"",
            "    },",
            "    \"keywords\": [",
            "        \"y\",",
            "        \"lib\",",
            "        \"syls\"",
            "    ],",
            "    \"repository\": {",
            "        \"url\": \"https://github.com/MrYNikita/Y.git\",",
            "        \"type\": \"git\"",
            "    },",
            "    \"description\": \"\",",
            "    \"dependencies\": {",
            "        \"@syls/y\": \"*\"",
            "    },",
            "    \"devDependencies\": {",
            "        \"@syls/test\": \"*\"",
            "    }",
            "}",
        ],
        "scope": "json",
        "prefix": "file-package-syls",
        "description": "File-package-syls - это шаблон файла пакета (package.json) syls.",
        "isFileTemplate": true,
    },
    "file-metadata-syls": {
        "body": [
            "/**",
            " * @file ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}/$TM_FILENAME",
            " * @author ${1:Yakhin Nikita Artemovich} ${2:<mr.y.nikita@gmail.com>}",
            " * @license Apache-2.0",
            " * @copyright SYLS (Software Y Lib Solutions) $CURRENT_YEAR",
            "*/",
        ],
        "scope": "javascript,typescript",
        "prefix": "file-metadata-syls",
        "description": "Метаданные файла syls."
    },
    "file-package-heir-syls": {
        "body": [
            "\"./$1\": {",
            "    \"types\": \"./-heir/$1/-module/type.d.ts\",",
            "    \"import\": \"./-heir/$1/-module/export.mjs\"",
            "}$0",
        ],
        "scope": "json",
        "prefix": "file-package-heir-syls",
        "description": "File-package-heir-syls - шаблон для экспорта наследника syls."
    },
    "file-package-submodule-syls": {
        "body": [
            "\"./$1\": {",
            "    \"types\": \"./-submodule/$1/-module/type.d.ts\",",
            "    \"import\": \"./-submodule/$1/-module/export.mjs\"",
            "}$0",
        ],
        "scope": "json",
        "prefix": "file-package-submodule-syls",
        "description": "File-package-submodule-syls - шаблон для экспорта подмодуля syls."
    },
    //
    // Значения
    "value-syls": {
        "body": [
            "/** ### ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}$1",
            " * ",
            " * ***",
            " * ",
            " * $2",
            " * ",
            " * ***",
            " * ",
            "*/",
            "export const ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}$1 = $0;",
        ],
        "scope": "javascript,typescript",
        "prefix": "value-syls",
        "description": "Value-syls - значение syls."
    },
    //
    // Функции
    "function-syls": {
        "body": [
            "//#region $1",
            "",
            "/** ### ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TF${1/(\\w)/${1:/upcase}/}",
            " * - Тип `TF`",
            " * ***",
            " * ",
            " * Результирующие параметры функции `$1`.",
            " * ",
            " * @typedef {${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TFU${1/(\\w)/${1:/upcase}/}&${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}T} ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TF${1/(\\w)/${1:/upcase}/}",
            " * ",
            "*/",
            "/** ### ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TFU${1/(\\w)/${1:/upcase}/}",
            " * - Тип `TFU`",
            " * ",
            " * Уникальные параметры функции `$1`.",
            " * ",
            " * @typedef ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TFU${1/(\\w)/${1:/upcase}/}",
            " * @prop {any} _",
            "*/",
            "",
            "/** @arg {${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Deceit(t) {",
            "    ",
            "    try {",
            "        ",
            "        return $1Verify(t);",
            "        ",
            "    } catch (e) {",
            "        ",
            "        if (config?.strict) {",
            "            ",
            "            throw e;",
            "            ",
            "        };",
            "        ",
            "        return undefined;",
            "        ",
            "    } finally {",
            "        ",
            "        ",
            "        ",
            "    };",
            "    ",
            "};",
            "/** @arg {${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Verify(t) {",
            "    ",
            "    const {",
            "    ",
            "    ",
            "    ",
            "    } = t;",
            "    ",
            "    return $1Handle(t);",
            "   ",
            "};",
            "/** @arg {${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Handle(t) {",
            "   ",
            "    const {",
            "    ",
            "    ",
            "    ",
            "    } = t;",
            "   ",
            "    return $1Comply(t);",
            "   ",
            "};",
            "/** @arg {${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Comply(t) {",
            "   ",
            "    const {",
            "    ",
            "    ",
            "    ",
            "    } = t;",
            "    ",
            "    ",
            "    ",
            "};",
            "",
            "$0",
            "",
            "//#endregion",
        ],
        "scope": "javascript,typescript",
        "prefix": "function-syls",
        "description": "Function-syls - шаблон функции syls.",
    },
    "function-provider-syls": {
        "body": [
            "/**",
            " * ### ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}$1$2",
            " * ",
            " * ***",
            " * ",
            " * $3",
            " * ",
            " * ***",
            " * $2",
            " * @function",
            "*/",
            "export function ${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/$1/}$1$2() {",
            "",
            "    return ${1/(\\w)/${1:/downcase}/}Deceit({});",
            "",
            "};",
        ],
        "scope": "javascript,typescript",
        "prefix": "function-provider-syls",
        "description": "Function-provider-syls - шаблон функции поставщика syls."
    },
    //
    // Типы
    //
    // Отладка
    "breakpoint-syls": {
        "body": [
            "console.log('${RELATIVE_FILEPATH/[^\\w\\d,-. _]/\\/\\//g} $TM_LINE_INDEX');",
            "console.log(${1|[],this|}$0);",
            "console.log('#'.repeat(5));",
        ],
        "scope": "javascript,typescript",
        "prefix": "breakpoint-syls",
        "description": "Breakpoint-syls - шаблон точки прерывания syls."
    },
    "breakpoint-exit-syls": {
        "body": [
            "console.log('${RELATIVE_FILEPATH/[^\\w\\d,-. _]/\\/\\//g} $TM_LINE_INDEX');",
            "console.log(${1|[],this|}$0);",
            "console.log('#'.repeat(5));",
            "process.exit();"
        ],
        "scope": "javascript,typescript",
        "prefix": "breakpoint-exit-syls",
        "description": "Breakpoint-exit-syls - шаблон точки прерывания syls с выводом информации."
    },
    //
    // Журнал изменений
    "changelog-syls": {
        "body": [
            "# ${1:Y${TM_DIRECTORY/.*\\\\([^\\\\]*)\\\\.*/${1:/capitalize}/}}",
            "",
            "$0",
        ],
        "scope": "markdown",
        "prefix": "changelog-syls",
        "description": "Changelog-syls - журнал изменений syls.",
        "isFileTemplate": true,
    },
    "changelog-fix-syls": {
        "body": [
            "### **Исправления**",
            "$0",
        ],
        "scope": "markdown",
        "prefix": "changelog-fix-syls",
        "description": "Changelog-fix-syls - шаблон раздела для обновления журнала изменений syls."
    },
    "changelog-point-syls": {
        "body": [
            "- #### **$1**",
            "    $2",
            "$0"
        ],
        "scope": "markdown",
        "prefix": "changelog-point-syls",
        "description": "Changelog-point-syls - пункт журнала изменений syls."
    },
    "changelog-update-syls": {
        "body": [
            "## **${1:0}.${2:0}.${3:0} - $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR**",
            "$0",
            "***",
        ],
        "scope": "markdown",
        "prefix": "changelog-update-syls",
        "description": "Changelog-update-syls - обновление журнала изменений syls."
    },
    "changelog-change-syls": {
        "body": [
            "### **Изменения**",
            "$0",
        ],
        "scope": "markdown",
        "prefix": "changelog-change-syls",
        "description": "Changelog-change-syls - шаблон раздела для обновления журнала изменений syls."
    },
    //
    //
}